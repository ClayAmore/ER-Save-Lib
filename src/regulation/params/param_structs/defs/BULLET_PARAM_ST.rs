use deku::prelude::*;
use deku::ctx::Endian;
use deku::{ DekuRead, DekuWrite};
#[derive(PartialEq, Debug, DekuRead, DekuWrite)]
#[deku(endian = "endian", ctx = "endian: Endian, version: u32")]
pub struct BULLET_PARAM_ST {
	pub atkId_Bullet: i32,
	pub sfxId_Bullet: i32,
	pub sfxId_Hit: i32,
	pub sfxId_Flick: i32,
	pub life: f32,
	pub dist: f32,
	pub shootInterval: f32,
	pub gravityInRange: f32,
	pub gravityOutRange: f32,
	pub hormingStopRange: f32,
	pub initVellocity: f32,
	pub accelInRange: f32,
	pub accelOutRange: f32,
	pub maxVellocity: f32,
	pub minVellocity: f32,
	pub accelTime: f32,
	pub homingBeginDist: f32,
	pub hitRadius: f32,
	pub hitRadiusMax: f32,
	pub spreadTime: f32,
	pub expDelay: f32,
	pub hormingOffsetRange: f32,
	pub dmgHitRecordLifeTime: f32,
	pub externalForce: f32,
	pub spEffectIDForShooter: i32,
	pub autoSearchNPCThinkID: i32,
	pub HitBulletID: i32,
	pub spEffectId0: i32,
	pub spEffectId1: i32,
	pub spEffectId2: i32,
	pub spEffectId3: i32,
	pub spEffectId4: i32,
	pub numShoot: i16,
	pub homingAngle: i16,
	pub shootAngle: i16,
	pub shootAngleInterval: i16,
	pub shootAngleXInterval: i16,
	pub damageDamp: i8,
	pub spelDamageDamp: i8,
	pub fireDamageDamp: i8,
	pub thunderDamageDamp: i8,
	pub staminaDamp: i8,
	pub knockbackDamp: i8,
	pub shootAngleXZ: i8,
	pub lockShootLimitAng: u8,
	pub pad2: [u8;1],
	pub prevVelocityDirRate: u8,
	pub atkAttribute: u8,
	pub spAttribute: u8,
	pub Material_AttackType: u8,
	pub Material_AttackMaterial: u8,
	#[deku(skip, cond = "version >= 11210015", bits = 6)]
	pub pad_old: u8,
	#[deku(bits = 1)]
	pub isPenetrateObj: u8,
	#[deku(bits = 1)]
	pub isPenetrateChr: u8,
	#[deku(skip, cond = "version < 11210015", bits = 5)]
	pub pad: u8,
	#[deku(skip, cond = "version < 11210015", bits = 1)]
	pub mayRemoteDetonate: u8,
	pub launchConditionType: u8,
	#[deku(bits = 1)]
	pub isAttackSFX: u8,
	#[deku(bits = 3)]
	pub EmittePosType: u8,
	#[deku(bits = 3)]
	pub FollowType: u8,
	#[deku(bits = 1)]
	pub isHitOtherBulletForceEraseB: u8,
	#[deku(bits = 1)]
	pub isHitOtherBulletForceEraseA: u8,
	#[deku(bits = 1)]
	pub isUseMultiDmyPolyIfPlace: u8,
	#[deku(bits = 1)]
	pub isUseSharedHitList: u8,
	#[deku(bits = 1)]
	pub isHitBothTeam: u8,
	#[deku(bits = 1)]
	pub isPenetrateMap: u8,
	#[deku(bits = 1)]
	pub isEndlessHit: u8,
	#[deku(bits = 1)]
	pub isEnableAutoHoming: u8,
	#[deku(bits = 2)]
	pub dmgCalcSide: u8,
	#[deku(bits = 1)]
	pub isHitDarkForceMagic: u8,
	#[deku(bits = 1)]
	pub isIgnoreMoveStateIfHitWater: u8,
	#[deku(bits = 1)]
	pub isIgnoreSfxIfHitWater: u8,
	#[deku(bits = 1)]
	pub isHitForceMagic: u8,
	#[deku(bits = 1)]
	pub isInheritSfxToChild: u8,
	#[deku(bits = 1)]
	pub isOwnerOverrideInitAngle: u8,
	#[deku(bits = 1)]
	pub isSyncBulletCulcDumypolyPos: u8,
	pub darkDamageDamp: i8,
	pub bulletSfxDeleteType_byHit: i8,
	pub bulletSfxDeleteType_byLifeDead: i8,
	pub targetYOffsetRange: f32,
	pub shootAngleYMaxRandom: f32,
	pub shootAngleXMaxRandom: f32,
	pub intervalCreateBulletId: i32,
	pub intervalCreateTimeMin: f32,
	pub intervalCreateTimeMax: f32,
	pub predictionShootObserveTime: f32,
	pub intervalCreateWaitTime: f32,
	pub sfxPostureType: u8,
	pub createLimitGroupId: u8,
	pub pad5: [u8;1],
	#[deku(skip, cond = "version < 11210015", bits = 1)]
	pub unknown_0xc3_5: u8,
	#[deku(skip, cond = "version >= 11210015", bits = 1)]
	pub pad1: u8,
	#[deku(bits = 1)]
	pub isUseBulletWallFilter: u8,
	#[deku(bits = 1)]
	pub isHitFlare: u8,
	#[deku(bits = 1)]
	pub isCheckWall_byCenterRay: u8,
	#[deku(bits = 1)]
	pub isDisableHitSfx_byChrAndObj: u8,
	#[deku(bits = 1)]
	pub isInheritSpeedToChild: u8,
	#[deku(bits = 1)]
	pub isAiInterruptShootNoDamageBullet: u8,
	#[deku(bits = 1)]
	pub isNonDependenceMagicForFunnleNum: u8,
	pub randomCreateRadius: f32,
	pub followOffset_BaseHeight: f32,
	pub assetNo_Hit: i32,
	pub lifeRandomRange: f32,
	pub homingAngleX: i16,
	pub ballisticCalcType: u8,
	pub attachEffectType: u8,
	pub seId_Bullet1: i32,
	pub seId_Bullet2: i32,
	pub seId_Hit: i32,
	pub seId_Flick: i32,
	pub howitzerShootAngleXMin: i16,
	pub howitzerShootAngleXMax: i16,
	pub howitzerInitMinVelocity: f32,
	pub howitzerInitMaxVelocity: f32,
	pub sfxId_ForceErase: i32,
	pub bulletSfxDeleteType_byForceErase: i8,
	pub pad3: [u8;1],
	pub followDmypoly_forSfxPose: i16,
	pub followOffset_Radius: f32,
	pub spBulletDistUpRate: f32,
	pub nolockTargetDist: f32,
	pub pad4: [u8;8],
}
