use deku::prelude::*;
use deku::ctx::Endian;
use deku::{ DekuRead, DekuWrite};
#[derive(PartialEq, Debug, DekuRead, DekuWrite)]
#[deku(endian = "endian", ctx = "endian: Endian, version: u32")]
pub struct AI_ATTACK_PARAM_ST {
	pub attackTableId: i32,
	pub attackId: i32,
	pub successDistance: f32,
	pub turnTimeBeforeAttack: f32,
	pub frontAngleRange: i16,
	pub upAngleThreshold: i16,
	pub downAngleThershold: i16,
	pub isFirstAttack: u8,
	pub doesSelectOnOutRange: u8,
	pub minOptimalDistance: f32,
	pub maxOptimalDistance: f32,
	pub baseDirectionForOptimalAngle1: i16,
	pub optimalAttackAngleRange1: i16,
	pub baseDirectionForOptimalAngle2: i16,
	pub optimalAttackAngleRange2: i16,
	pub intervalForExec: f32,
	pub selectionTendency: f32,
	pub shortRangeTendency: f32,
	pub middleRangeTendency: f32,
	pub farRangeTendency: f32,
	pub outRangeTendency: f32,
	pub deriveAttackId1: i32,
	pub deriveAttackId2: i32,
	pub deriveAttackId3: i32,
	pub deriveAttackId4: i32,
	pub deriveAttackId5: i32,
	pub deriveAttackId6: i32,
	pub deriveAttackId7: i32,
	pub deriveAttackId8: i32,
	pub deriveAttackId9: i32,
	pub deriveAttackId10: i32,
	pub deriveAttackId11: i32,
	pub deriveAttackId12: i32,
	pub deriveAttackId13: i32,
	pub deriveAttackId14: i32,
	pub deriveAttackId15: i32,
	pub deriveAttackId16: i32,
	pub goalLifeMin: f32,
	pub goalLifeMax: f32,
	pub doesSelectOnInnerRange: u8,
	pub enableAttackOnBattleStart: u8,
	pub doesSelectOnTargetDown: u8,
	pub pad1: [u8;1],
	pub minArriveDistance: f32,
	pub maxArriveDistance: f32,
	pub comboExecDistance: f32,
	pub comboExecRange: f32,
}
