use deku::prelude::*;
use deku::ctx::Endian;
use deku::{ DekuRead, DekuWrite};
#[derive(PartialEq, Debug, DekuRead, DekuWrite)]
#[deku(endian = "endian", ctx = "endian: Endian, version: u32")]
pub struct ATK_PARAM_ST {
	pub hit0_Radius: f32,
	pub hit1_Radius: f32,
	pub hit2_Radius: f32,
	pub hit3_Radius: f32,
	pub knockbackDist: f32,
	pub hitStopTime: f32,
	pub spEffectId0: i32,
	pub spEffectId1: i32,
	pub spEffectId2: i32,
	pub spEffectId3: i32,
	pub spEffectId4: i32,
	pub hit0_DmyPoly1: i16,
	pub hit1_DmyPoly1: i16,
	pub hit2_DmyPoly1: i16,
	pub hit3_DmyPoly1: i16,
	pub hit0_DmyPoly2: i16,
	pub hit1_DmyPoly2: i16,
	pub hit2_DmyPoly2: i16,
	pub hit3_DmyPoly2: i16,
	pub blowingCorrection: i16,
	pub atkPhysCorrection: i16,
	pub atkMagCorrection: i16,
	pub atkFireCorrection: i16,
	pub atkThunCorrection: i16,
	pub atkStamCorrection: i16,
	pub guardAtkRateCorrection: i16,
	pub guardBreakCorrection: i16,
	pub atkThrowEscapeCorrection: i16,
	pub subCategory1: u8,
	pub subCategory2: u8,
	pub atkPhys: i16,
	pub atkMag: i16,
	pub atkFire: i16,
	pub atkThun: i16,
	pub atkStam: i16,
	pub guardAtkRate: i16,
	pub guardBreakRate: i16,
	pub pad6: [u8;1],
	pub isEnableCalcDamageForBushesObj: u8,
	pub atkThrowEscape: i16,
	pub atkObj: i16,
	pub guardStaminaCutRate: i16,
	pub guardRate: i16,
	pub throwTypeId: i16,
	pub hit0_hitType: u8,
	pub hit1_hitType: u8,
	pub hit2_hitType: u8,
	pub hit3_hitType: u8,
	pub hti0_Priority: u8,
	pub hti1_Priority: u8,
	pub hti2_Priority: u8,
	pub hti3_Priority: u8,
	pub dmgLevel: u8,
	pub mapHitType: u8,
	pub guardCutCancelRate: i8,
	pub atkAttribute: u8,
	pub spAttribute: u8,
	pub atkType: u8,
	pub atkMaterial: u8,
	pub guardRangeType: u8,
	pub defSeMaterial1: i16,
	pub hitSourceType: u8,
	pub throwFlag: u8,
	#[deku(bits = 1)]
	pub isGhostAtk: u8,
	#[deku(bits = 1)]
	pub isArrowAtk: u8,
	#[deku(bits = 1)]
	pub repeatHitSfx: u8,
	#[deku(bits = 1)]
	pub IgnoreNotifyMissSwingForAI: u8,
	#[deku(bits = 1)]
	pub disableHitSpEffect: u8,
	#[deku(bits = 1)]
	pub disableStaminaAttack: u8,
	#[deku(bits = 1)]
	pub disableGuard: u8,
	#[deku(bits = 1)]
	pub isDisableNoDamage: u8,
	pub atkPow_forSfx: i8,
	pub atkDir_forSfx: i8,
	#[deku(bits = 1)]
	pub excludeThreatLvNotify: u8,
	#[deku(bits = 1)]
	pub isAddBaseAtk: u8,
	#[deku(bits = 1)]
	pub isVsRideAtk: u8,
	#[deku(bits = 1)]
	pub isCheckDoorPenetration: u8,
	#[deku(bits = 1)]
	pub selfTarget: u8,
	#[deku(bits = 1)]
	pub friendlyTarget: u8,
	#[deku(bits = 1)]
	pub opposeTarget: u8,
	#[deku(bits = 1)]
	pub pad1: u8,
	pub atkBehaviorId: u8,
	pub atkPow_forSe: i8,
	pub atkSuperArmor: f32,
	pub decalId1: i32,
	pub decalId2: i32,
	pub AppearAiSoundId: i32,
	pub HitAiSoundId: i32,
	pub HitRumbleId: i32,
	pub HitRumbleIdByNormal: i32,
	pub HitRumbleIdByMiddle: i32,
	pub HitRumbleIdByRoot: i32,
	pub traceSfxId0: i32,
	pub traceDmyIdHead0: i32,
	pub traceDmyIdTail0: i32,
	pub traceSfxId1: i32,
	pub traceDmyIdHead1: i32,
	pub traceDmyIdTail1: i32,
	pub traceSfxId2: i32,
	pub traceDmyIdHead2: i32,
	pub traceDmyIdTail2: i32,
	pub traceSfxId3: i32,
	pub traceDmyIdHead3: i32,
	pub traceDmyIdTail3: i32,
	pub traceSfxId4: i32,
	pub traceDmyIdHead4: i32,
	pub traceDmyIdTail4: i32,
	pub traceSfxId5: i32,
	pub traceDmyIdHead5: i32,
	pub traceDmyIdTail5: i32,
	pub traceSfxId6: i32,
	pub traceDmyIdHead6: i32,
	pub traceDmyIdTail6: i32,
	pub traceSfxId7: i32,
	pub traceDmyIdHead7: i32,
	pub traceDmyIdTail7: i32,
	pub hit4_Radius: f32,
	pub hit5_Radius: f32,
	pub hit6_Radius: f32,
	pub hit7_Radius: f32,
	pub hit8_Radius: f32,
	pub hit9_Radius: f32,
	pub hit10_Radius: f32,
	pub hit11_Radius: f32,
	pub hit12_Radius: f32,
	pub hit13_Radius: f32,
	pub hit14_Radius: f32,
	pub hit15_Radius: f32,
	pub hit4_DmyPoly1: i16,
	pub hit5_DmyPoly1: i16,
	pub hit6_DmyPoly1: i16,
	pub hit7_DmyPoly1: i16,
	pub hit8_DmyPoly1: i16,
	pub hit9_DmyPoly1: i16,
	pub hit10_DmyPoly1: i16,
	pub hit11_DmyPoly1: i16,
	pub hit12_DmyPoly1: i16,
	pub hit13_DmyPoly1: i16,
	pub hit14_DmyPoly1: i16,
	pub hit15_DmyPoly1: i16,
	pub hit4_DmyPoly2: i16,
	pub hit5_DmyPoly2: i16,
	pub hit6_DmyPoly2: i16,
	pub hit7_DmyPoly2: i16,
	pub hit8_DmyPoly2: i16,
	pub hit9_DmyPoly2: i16,
	pub hit10_DmyPoly2: i16,
	pub hit11_DmyPoly2: i16,
	pub hit12_DmyPoly2: i16,
	pub hit13_DmyPoly2: i16,
	pub hit14_DmyPoly2: i16,
	pub hit15_DmyPoly2: i16,
	pub hit4_hitType: u8,
	pub hit5_hitType: u8,
	pub hit6_hitType: u8,
	pub hit7_hitType: u8,
	pub hit8_hitType: u8,
	pub hit9_hitType: u8,
	pub hit10_hitType: u8,
	pub hit11_hitType: u8,
	pub hit12_hitType: u8,
	pub hit13_hitType: u8,
	pub hit14_hitType: u8,
	pub hit15_hitType: u8,
	pub hti4_Priority: u8,
	pub hti5_Priority: u8,
	pub hti6_Priority: u8,
	pub hti7_Priority: u8,
	pub hti8_Priority: u8,
	pub hti9_Priority: u8,
	pub hti10_Priority: u8,
	pub hti11_Priority: u8,
	pub hti12_Priority: u8,
	pub hti13_Priority: u8,
	pub hti14_Priority: u8,
	pub hti15_Priority: u8,
	pub defSfxMaterial1: i16,
	pub defSeMaterial2: i16,
	pub defSfxMaterial2: i16,
	pub atkDarkCorrection: i16,
	pub atkDark: i16,
	#[deku(bits = 4)]
	pub pad2: u8,
	#[deku(bits = 1)]
	pub isInvalidatedByNoDamageInAir: u8,
	#[deku(bits = 1)]
	pub isDisableBothHandsAtkBonus: u8,
	#[deku(bits = 1)]
	pub isDisableParry: u8,
	#[deku(bits = 1)]
	pub pad5: u8,
	pub dmgLevel_vsPlayer: i8,
	pub statusAilmentAtkPowerCorrectRate: i16,
	pub spEffectAtkPowerCorrectRate_byPoint: i16,
	pub spEffectAtkPowerCorrectRate_byRate: i16,
	pub spEffectAtkPowerCorrectRate_byDmg: i16,
	pub atkBehaviorId_2: u8,
	pub throwDamageAttribute: u8,
	pub statusAilmentAtkPowerCorrectRate_byPoint: i16,
	pub overwriteAttackElementCorrectId: i32,
	pub decalBaseId1: i16,
	pub decalBaseId2: i16,
	pub wepRegainHpScale: i16,
	pub atkRegainHp: i16,
	pub regainableTimeScale: f32,
	pub regainableHpRateScale: f32,
	pub regainableSlotId: i8,
	pub spAttributeVariationValue: u8,
	pub parryForwardOffset: i16,
	pub atkSuperArmorCorrection: f32,
	pub defSfxMaterialVariationValue: u8,
	pub pad4: [u8;3],
	pub finalDamageRateId: i32,
	#[deku(skip, cond = "version >= 11210015", count = "12")]
	pub pad7_old: Vec<u8>,
	#[deku(skip, cond = "version < 11210015")]
	pub subCategory3: u8,
	#[deku(skip, cond = "version < 11210015")]
	pub subCategory4: u8,
	#[deku(skip, cond = "version < 11210015", count = "10")]
	pub pad7: Vec<u8>,
}
