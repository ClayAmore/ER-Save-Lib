use deku::prelude::*;
use deku::ctx::Endian;
use deku::{ DekuRead, DekuWrite};
#[derive(PartialEq, Debug, DekuRead, DekuWrite)]
#[deku(endian = "endian", ctx = "endian: Endian, version: u32")]
pub struct ITEMLOT_PARAM_ST {
	pub lotItemId01: i32,
	pub lotItemId02: i32,
	pub lotItemId03: i32,
	pub lotItemId04: i32,
	pub lotItemId05: i32,
	pub lotItemId06: i32,
	pub lotItemId07: i32,
	pub lotItemId08: i32,
	pub lotItemCategory01: i32,
	pub lotItemCategory02: i32,
	pub lotItemCategory03: i32,
	pub lotItemCategory04: i32,
	pub lotItemCategory05: i32,
	pub lotItemCategory06: i32,
	pub lotItemCategory07: i32,
	pub lotItemCategory08: i32,
	pub lotItemBasePoint01: i16,
	pub lotItemBasePoint02: i16,
	pub lotItemBasePoint03: i16,
	pub lotItemBasePoint04: i16,
	pub lotItemBasePoint05: i16,
	pub lotItemBasePoint06: i16,
	pub lotItemBasePoint07: i16,
	pub lotItemBasePoint08: i16,
	pub cumulateLotPoint01: i16,
	pub cumulateLotPoint02: i16,
	pub cumulateLotPoint03: i16,
	pub cumulateLotPoint04: i16,
	pub cumulateLotPoint05: i16,
	pub cumulateLotPoint06: i16,
	pub cumulateLotPoint07: i16,
	pub cumulateLotPoint08: i16,
	pub getItemFlagId01: i32,
	pub getItemFlagId02: i32,
	pub getItemFlagId03: i32,
	pub getItemFlagId04: i32,
	pub getItemFlagId05: i32,
	pub getItemFlagId06: i32,
	pub getItemFlagId07: i32,
	pub getItemFlagId08: i32,
	pub getItemFlagId: i32,
	pub cumulateNumFlagId: i32,
	pub cumulateNumMax: u8,
	pub lotItem_Rarity: i8,
	pub lotItemNum01: u8,
	pub lotItemNum02: u8,
	pub lotItemNum03: u8,
	pub lotItemNum04: u8,
	pub lotItemNum05: u8,
	pub lotItemNum06: u8,
	pub lotItemNum07: u8,
	pub lotItemNum08: u8,
	#[deku(bits = 1)]
	pub enableLuck01: i16,
	#[deku(bits = 1)]
	pub enableLuck02: i16,
	#[deku(bits = 1)]
	pub enableLuck03: i16,
	#[deku(bits = 1)]
	pub enableLuck04: i16,
	#[deku(bits = 1)]
	pub enableLuck05: i16,
	#[deku(bits = 1)]
	pub enableLuck06: i16,
	#[deku(bits = 1)]
	pub enableLuck07: i16,
	#[deku(bits = 1)]
	pub enableLuck08: i16,
	#[deku(bits = 1)]
	pub cumulateReset01: i16,
	#[deku(bits = 1)]
	pub cumulateReset02: i16,
	#[deku(bits = 1)]
	pub cumulateReset03: i16,
	#[deku(bits = 1)]
	pub cumulateReset04: i16,
	#[deku(bits = 1)]
	pub cumulateReset05: i16,
	#[deku(bits = 1)]
	pub cumulateReset06: i16,
	#[deku(bits = 1)]
	pub cumulateReset07: i16,
	#[deku(bits = 1)]
	pub cumulateReset08: i16,
	pub GameClearOffset: i8,
	#[deku(bits = 1)]
	pub canExecByFriendlyGhost: u8,
	#[deku(bits = 1)]
	pub canExecByHostileGhost: u8,
	#[deku(bits = 6)]
	pub PAD1: u8,
	pub PAD2: i16,
}
