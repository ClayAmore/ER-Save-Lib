use deku::prelude::*;
use deku::ctx::Endian;
use deku::{ DekuRead, DekuWrite};
#[derive(PartialEq, Debug, DekuRead, DekuWrite)]
#[deku(endian = "endian", ctx = "endian: Endian, version: u32")]
pub struct AI_ODDS_PARAM {
	pub act0: u8,
	pub act1: u8,
	pub act2: u8,
	pub act3: u8,
	pub act4: u8,
	pub act5: u8,
	pub act6: u8,
	pub act7: u8,
	pub act8: u8,
	pub act9: u8,
	pub act10: u8,
	pub act11: u8,
	pub act12: u8,
	pub act13: u8,
	pub act14: u8,
	pub act15: u8,
	pub act16: u8,
	pub act17: u8,
	pub act18: u8,
	pub act19: u8,
	pub act20: u8,
	pub act21: u8,
	pub act22: u8,
	pub act23: u8,
	pub act24: u8,
	pub act25: u8,
	pub act26: u8,
	pub act27: u8,
	pub act28: u8,
	pub act29: u8,
	pub act30: u8,
	pub act31: u8,
	pub act32: u8,
	pub act33: u8,
	pub act34: u8,
	pub act35: u8,
	pub act36: u8,
	pub act37: u8,
	pub act38: u8,
	pub act39: u8,
	pub act40: u8,
	pub act41: u8,
	pub act42: u8,
	pub act43: u8,
	pub act44: u8,
	pub act45: u8,
	pub act46: u8,
	pub act47: u8,
	pub act48: u8,
	pub act49: u8,
	pub act50: u8,
	pub act51: u8,
	pub act52: u8,
	pub act53: u8,
	pub act54: u8,
	pub act55: u8,
	pub act56: u8,
	pub act57: u8,
	pub act58: u8,
	pub act59: u8,
	pub act60: u8,
	pub act61: u8,
	pub act62: u8,
	pub act63: u8,
	pub act64: u8,
	pub act65: u8,
	pub act66: u8,
	pub act67: u8,
	pub act68: u8,
	pub act69: u8,
	pub act70: u8,
	pub act71: u8,
	pub act72: u8,
	pub act73: u8,
	pub act74: u8,
	pub act75: u8,
	pub act76: u8,
	pub act77: u8,
	pub act78: u8,
	pub act79: u8,
	pub act80: u8,
	pub act81: u8,
	pub act82: u8,
	pub act83: u8,
	pub act84: u8,
	pub act85: u8,
	pub act86: u8,
	pub act87: u8,
	pub act88: u8,
	pub act89: u8,
	pub act90: u8,
	pub act91: u8,
	pub act92: u8,
	pub act93: u8,
	pub act94: u8,
	pub act95: u8,
	pub act96: u8,
	pub act97: u8,
	pub act98: u8,
	pub act99: u8,
	#[deku(count = "12")]
	pub pad0: Vec<u8>,
}
