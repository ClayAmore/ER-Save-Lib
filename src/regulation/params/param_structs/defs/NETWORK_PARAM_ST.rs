use deku::prelude::*;
use deku::ctx::Endian;
use deku::{ DekuRead, DekuWrite};
#[derive(PartialEq, Debug, DekuRead, DekuWrite)]
#[deku(endian = "endian", ctx = "endian: Endian, version: u32")]
pub struct NETWORK_PARAM_ST {
	pub signVerticalOffset: f32,
	pub maxSignPosCorrectionRange: f32,
	pub summonTimeoutTime: f32,
	pub pad_0: [u8;4],
	pub signPuddleActiveMessageIntervalSec: f32,
	pub keyGuideHeight_0: f32,
	pub reloadSignIntervalTime1: f32,
	pub reloadSignIntervalTime2: f32,
	pub reloadSignTotalCount_0: i32,
	pub reloadSignCellCount_0: i32,
	pub updateSignIntervalTime: f32,
	pub basicExclusiveRange_0: f32,
	pub basicExclusiveHeight_0: f32,
	pub previewChrWaitingTime: f32,
	pub signVisibleRange_0: f32,
	pub cellGroupHorizontalRange_0: i32,
	pub cellGroupTopRange_0: i32,
	pub cellGroupBottomRange_0: i32,
	pub minWhitePhantomLimitTimeScale: f32,
	pub minSmallPhantomLimitTimeScale: f32,
	pub whiteKeywordLimitTimeScale: f32,
	pub smallKeywordLimitTimeScale: f32,
	pub blackKeywordLimitTimeScale: f32,
	pub dragonKeywordLimitTimeScale: f32,
	pub singGetMax: i32,
	pub signDownloadSpan: f32,
	pub signUpdateSpan: f32,
	pub signPad: [u8;4],
	pub maxBreakInTargetListCount: i32,
	pub breakInRequestIntervalTimeSec: f32,
	pub breakInRequestTimeOutSec: f32,
	#[deku(skip, cond = "version >= 11210015")]
	pub pad_1_old: [u8;4],
	#[deku(skip, cond = "version < 11210015")]
	pub unknown_0x7c: u8,
	#[deku(skip, cond = "version < 11210015")]
	pub pad_1: [u8;3],
	pub keyGuideRange: f32,
	pub keyGuideHeight_1: f32,
	pub reloadSignTotalCount_1: i32,
	pub reloadNewSignCellCount: i32,
	pub reloadRandomSignCellCount: i32,
	pub maxSignTotalCount_0: i32,
	pub maxSignCellCount_0: i32,
	pub basicExclusiveRange_1: f32,
	pub basicExclusiveHeight_1: f32,
	pub signVisibleRange_1: f32,
	pub maxWriteSignCount: i32,
	pub maxReadSignCount: i32,
	pub reloadSignIntervalTime_0: f32,
	pub cellGroupHorizontalRange_1: i32,
	pub cellGroupTopRange_1: i32,
	pub cellGroupBottomRange_1: i32,
	pub lifeTime_0: i32,
	pub downloadSpan_0: f32,
	pub downloadEvaluationSpan: f32,
	pub pad_2: [u8;4],
	pub deadingGhostStartPosThreshold: f32,
	pub keyGuideHeight_2: f32,
	pub keyGuideRangePlayer: f32,
	pub keyGuideHeightPlayer: f32,
	pub reloadSignTotalCount_2: i32,
	pub reloadSignCellCount_1: i32,
	pub maxSignTotalCount_1: i32,
	pub maxSignCellCount_1: i32,
	pub reloadSignIntervalTime_1: f32,
	pub signVisibleRange_2: f32,
	pub basicExclusiveRange_2: f32,
	pub basicExclusiveHeight_2: f32,
	pub cellGroupHorizontalRange_2: i32,
	pub cellGroupTopRange_2: i32,
	pub cellGroupBottomRange_2: i32,
	pub lifeTime_1: i32,
	pub recordDeadingGhostTotalTime: f32,
	pub recordDeadingGhostMinTime: f32,
	pub downloadSpan_1: f32,
	pub statueCreatableDistance: f32,
	pub reloadGhostTotalCount: i32,
	pub reloadGhostCellCount: i32,
	pub maxGhostTotalCount: i32,
	pub distanceOfBeginRecordVersus: f32,
	pub distanceOfEndRecordVersus: f32,
	pub updateWanderGhostIntervalTime: f32,
	pub updateVersusGhostIntervalTime: f32,
	pub recordWanderingGhostTime: f32,
	pub recordWanderingGhostMinTime: f32,
	pub updateBonfireGhostIntervalTime: f32,
	pub replayGhostRangeOnView: f32,
	pub replayGhostRangeOutView: f32,
	pub replayBonfireGhostTime: f32,
	pub minBonfireGhostValidRange: f32,
	pub maxBonfireGhostValidRange: f32,
	pub minReplayIntervalTime: f32,
	pub maxReplayIntervalTime: f32,
	pub reloadGhostIntervalTime: f32,
	pub cellGroupHorizontalRange_3: i32,
	pub cellGroupTopRange_3: i32,
	pub replayBonfirePhantomParamIdForCodename: i32,
	pub replayBonfireModeRange: f32,
	pub replayBonfirePhantomParamId: i32,
	pub ghostpad: [u8;4],
	pub reloadVisitListCoolTime: f32,
	pub maxCoopBlueSummonCount: i32,
	pub maxBellGuardSummonCount: i32,
	pub maxVisitListCount: i32,
	pub reloadSearch_CoopBlue_Min: f32,
	pub reloadSearch_CoopBlue_Max: f32,
	pub reloadSearch_BellGuard_Min: f32,
	pub reloadSearch_BellGuard_Max: f32,
	pub reloadSearch_RatKing_Min: f32,
	pub reloadSearch_RatKing_Max: f32,
	pub visitpad00: [u8;8],
	pub srttMaxLimit: f32,
	pub srttMeanLimit: f32,
	pub srttMeanDeviationLimit: f32,
	pub darkPhantomLimitBoostTime: f32,
	pub darkPhantomLimitBoostScale: f32,
	pub multiplayDisableLifeTime: f32,
	pub abyssMultiplayLimit: u8,
	pub phantomWarpMinimumTime: u8,
	pub phantomReturnDelayTime: u8,
	pub terminateTimeoutTime: u8,
	pub penaltyPointLanDisconnect: i16,
	pub penaltyPointSignout: i16,
	pub penaltyPointReboot: i16,
	pub penaltyPointBeginPenalize: i16,
	pub penaltyForgiveItemLimitTime: f32,
	pub allAreaSearchRate_CoopBlue: u8,
	pub allAreaSearchRate_VsBlue: u8,
	pub allAreaSearchRate_BellGuard: u8,
	pub bloodMessageEvalHealRate: u8,
	pub smallGoldSuccessHostRewardId: i32,
	pub doorInvalidPlayAreaExtents: f32,
	pub signDisplayMax: u8,
	pub bloodStainDisplayMax: u8,
	pub bloodMessageDisplayMax: u8,
	#[deku(count = "9")]
	pub pad00: Vec<u8>,
	#[deku(count = "32")]
	pub pad10: Vec<u8>,
	pub summonMessageInterval: f32,
	pub hostRegisterUpdateTime: f32,
	pub hostTimeOutTime: f32,
	pub guestUpdateTime: f32,
	pub guestPlayerNoTimeOutTime: f32,
	pub hostPlayerNoTimeOutTime: f32,
	pub requestSearchQuickMatchLimit: i32,
	pub AvatarMatchSearchMax: i32,
	pub BattleRoyalMatchSearchMin: i32,
	pub BattleRoyalMatchSearchMax: i32,
	pub pad11: [u8;8],
	pub VisitorListMax: i32,
	pub VisitorTimeOutTime: f32,
	pub DownloadSpan_2: f32,
	pub VisitorGuestRequestMessageIntervalSec: f32,
	pub wanderGhostIntervalLifeTime: f32,
	#[deku(count = "12")]
	pub pad13: Vec<u8>,
	pub YellowMonkTimeOutTime: f32,
	pub YellowMonkDownloadSpan: f32,
	pub YellowMonkOverallFlowTimeOutTime: f32,
	pub pad14_0: [u8;4],
	pub pad14_1: [u8;8],
}
