use deku::prelude::*;
use deku::ctx::Endian;
use deku::{ DekuRead, DekuWrite};
#[derive(PartialEq, Debug, DekuRead, DekuWrite)]
#[deku(endian = "endian", ctx = "endian: Endian, version: u32")]
pub struct NPC_PARAM_ST {
	#[deku(bits = 1)]
	pub disableParam_NT: u8,
	#[deku(bits = 7)]
	pub disableParamReserve1: u8,
	pub disableParamReserve2: [u8;3],
	pub behaviorVariationId: i32,
	pub resistCorrectId_poison: i32,
	pub nameId: i32,
	pub turnVellocity: f32,
	pub hitHeight: f32,
	pub hitRadius: f32,
	pub weight: i32,
	pub hitYOffset: f32,
	pub hp: i32,
	pub mp: i32,
	pub getSoul: i32,
	pub itemLotId_enemy: i32,
	pub itemLotId_map: i32,
	pub maxAnkleRollAngle: f32,
	pub chrHitGroupAndNavimesh: u8,
	pub faceIconId: u8,
	pub deactivateDist: i16,
	pub chrActivateConditionParamId: i32,
	pub footIkErrorHeightLimit: f32,
	pub humanityLotId: i32,
	pub spEffectID0: i32,
	pub spEffectID1: i32,
	pub spEffectID2: i32,
	pub spEffectID3: i32,
	pub spEffectID4: i32,
	pub spEffectID5: i32,
	pub spEffectID6: i32,
	pub spEffectID7: i32,
	pub GameClearSpEffectID: i32,
	pub physGuardCutRate: f32,
	pub magGuardCutRate: f32,
	pub fireGuardCutRate: f32,
	pub thunGuardCutRate: f32,
	pub animIdOffset: i32,
	pub lockGazePoint0: i16,
	pub lockGazePoint1: i16,
	pub lockGazePoint2: i16,
	pub lockGazePoint3: i16,
	pub lockGazePoint4: i16,
	pub lockGazePoint5: i16,
	pub networkWarpDist: f32,
	pub dbgBehaviorR1: i32,
	pub dbgBehaviorL1: i32,
	pub dbgBehaviorR2: i32,
	pub dbgBehaviorL2: i32,
	pub dbgBehaviorRL: i32,
	pub dbgBehaviorRR: i32,
	pub dbgBehaviorRD: i32,
	pub dbgBehaviorRU: i32,
	pub dbgBehaviorLL: i32,
	pub dbgBehaviorLR: i32,
	pub dbgBehaviorLD: i32,
	pub dbgBehaviorLU: i32,
	pub animIdOffset2: i32,
	pub partsDamageRate1: f32,
	pub partsDamageRate2: f32,
	pub partsDamageRate3: f32,
	pub partsDamageRate4: f32,
	pub partsDamageRate5: f32,
	pub partsDamageRate6: f32,
	pub partsDamageRate7: f32,
	pub partsDamageRate8: f32,
	pub weakPartsDamageRate: f32,
	pub superArmorRecoverCorrection: f32,
	pub superArmorBrakeKnockbackDist: f32,
	pub stamina: i16,
	pub staminaRecoverBaseVel: i16,
	pub def_phys: i16,
	pub def_slash: i16,
	pub def_blow: i16,
	pub def_thrust: i16,
	pub def_mag: i16,
	pub def_fire: i16,
	pub def_thunder: i16,
	pub defFlickPower: i16,
	pub resist_poison: i16,
	pub resist_desease: i16,
	pub resist_blood: i16,
	pub resist_curse: i16,
	pub ghostModelId: i16,
	pub normalChangeResouceId: i16,
	pub guardAngle: i16,
	pub slashGuardCutRate: i16,
	pub blowGuardCutRate: i16,
	pub thrustGuardCutRate: i16,
	pub lockGazePoint6: i16,
	pub normalChangeTexChrId: i16,
	pub dropType: i16,
	pub knockbackRate: u8,
	pub knockbackParamId: u8,
	pub fallDamageDump: u8,
	pub staminaGuardDef: u8,
	pub resist_sleep: i16,
	pub resist_madness: i16,
	pub sleepGuardResist: i8,
	pub madnessGuardResist: i8,
	pub lockGazePoint7: i16,
	pub mpRecoverBaseVel: u8,
	pub flickDamageCutRate: u8,
	pub defaultLodParamId: i8,
	pub drawType: i8,
	pub npcType: u8,
	pub teamType: u8,
	pub moveType: u8,
	pub lockDist: u8,
	pub materialSe_Weak1: i16,
	pub materialSfx_Weak1: i16,
	pub partsDamageType: u8,
	pub vowType: u8,
	pub guardLevel: i8,
	pub burnSfxType: u8,
	pub poisonGuardResist: i8,
	pub diseaseGuardResist: i8,
	pub bloodGuardResist: i8,
	pub curseGuardResist: i8,
	pub parryAttack: u8,
	pub parryDefence: u8,
	pub sfxSize: u8,
	pub pushOutCamRegionRadius: u8,
	pub hitStopType: u8,
	pub ladderEndChkOffsetTop: u8,
	pub ladderEndChkOffsetLow: u8,
	#[deku(bits = 1)]
	pub useRagdollCamHit: u8,
	#[deku(bits = 1)]
	pub disableClothRigidHit: u8,
	#[deku(bits = 1)]
	pub useUndulationAddAnimFB: u8,
	#[deku(bits = 1)]
	pub isWeakA: u8,
	#[deku(bits = 1)]
	pub isGhost: u8,
	#[deku(bits = 1)]
	pub isNoDamageMotion: u8,
	#[deku(bits = 1)]
	pub isUnduration: u8,
	#[deku(bits = 1)]
	pub isChangeWanderGhost: u8,
	#[deku(bits = 1)]
	pub modelDispMask0: u8,
	#[deku(bits = 1)]
	pub modelDispMask1: u8,
	#[deku(bits = 1)]
	pub modelDispMask2: u8,
	#[deku(bits = 1)]
	pub modelDispMask3: u8,
	#[deku(bits = 1)]
	pub modelDispMask4: u8,
	#[deku(bits = 1)]
	pub modelDispMask5: u8,
	#[deku(bits = 1)]
	pub modelDispMask6: u8,
	#[deku(bits = 1)]
	pub modelDispMask7: u8,
	#[deku(bits = 1)]
	pub modelDispMask8: u8,
	#[deku(bits = 1)]
	pub modelDispMask9: u8,
	#[deku(bits = 1)]
	pub modelDispMask10: u8,
	#[deku(bits = 1)]
	pub modelDispMask11: u8,
	#[deku(bits = 1)]
	pub modelDispMask12: u8,
	#[deku(bits = 1)]
	pub modelDispMask13: u8,
	#[deku(bits = 1)]
	pub modelDispMask14: u8,
	#[deku(bits = 1)]
	pub modelDispMask15: u8,
	#[deku(bits = 1)]
	pub isEnableNeckTurn: u8,
	#[deku(bits = 1)]
	pub disableRespawn: u8,
	#[deku(bits = 1)]
	pub isMoveAnimWait: u8,
	#[deku(bits = 1)]
	pub isCrowd: u8,
	#[deku(bits = 1)]
	pub isWeakB: u8,
	#[deku(bits = 1)]
	pub isWeakC: u8,
	#[deku(bits = 1)]
	pub isWeakD: u8,
	#[deku(bits = 1)]
	pub doesAlwaysUseSpecialTurn: u8,
	#[deku(bits = 1)]
	pub isRideAtkTarget: u8,
	#[deku(bits = 1)]
	pub isEnableStepDispInterpolate: u8,
	#[deku(bits = 1)]
	pub isStealthTarget: u8,
	#[deku(bits = 1)]
	pub disableInitializeDead: u8,
	#[deku(bits = 1)]
	pub isHitRumble: u8,
	#[deku(bits = 1)]
	pub isSmoothTurn: u8,
	#[deku(bits = 1)]
	pub isWeakE: u8,
	#[deku(bits = 1)]
	pub isWeakF: u8,
	#[deku(bits = 1)]
	pub modelDispMask16: u8,
	#[deku(bits = 1)]
	pub modelDispMask17: u8,
	#[deku(bits = 1)]
	pub modelDispMask18: u8,
	#[deku(bits = 1)]
	pub modelDispMask19: u8,
	#[deku(bits = 1)]
	pub modelDispMask20: u8,
	#[deku(bits = 1)]
	pub modelDispMask21: u8,
	#[deku(bits = 1)]
	pub modelDispMask22: u8,
	#[deku(bits = 1)]
	pub modelDispMask23: u8,
	#[deku(bits = 1)]
	pub modelDispMask24: u8,
	#[deku(bits = 1)]
	pub modelDispMask25: u8,
	#[deku(bits = 1)]
	pub modelDispMask26: u8,
	#[deku(bits = 1)]
	pub modelDispMask27: u8,
	#[deku(bits = 1)]
	pub modelDispMask28: u8,
	#[deku(bits = 1)]
	pub modelDispMask29: u8,
	#[deku(bits = 1)]
	pub modelDispMask30: u8,
	#[deku(bits = 1)]
	pub modelDispMask31: u8,
	pub itemSearchRadius: f32,
	pub chrHitHeight: f32,
	pub chrHitRadius: f32,
	pub specialTurnType: u8,
	#[deku(bits = 1)]
	pub isSoulGetByBoss: u8,
	#[deku(bits = 1)]
	pub isBulletOwner_byObject: u8,
	#[deku(bits = 1)]
	pub isUseLowHitFootIk: u8,
	#[deku(bits = 1)]
	pub isCalculatePvPDamage: u8,
	#[deku(bits = 1)]
	pub isHostSyncChr: u8,
	#[deku(bits = 1)]
	pub isSkipWeakDamageAnim: u8,
	#[deku(bits = 1)]
	pub isKeepHitOnRide: u8,
	#[deku(bits = 1)]
	pub isSpCollide: u8,
	pub def_dark: i16,
	pub threatLv: i32,
	pub specialTurnDistanceThreshold: f32,
	pub autoFootEffectSfxId: i32,
	pub materialSe1: i16,
	pub materialSfx1: i16,
	pub materialSe_Weak2: i16,
	pub materialSfx_Weak2: i16,
	pub materialSe2: i16,
	pub materialSfx2: i16,
	pub spEffectID8: i32,
	pub spEffectID9: i32,
	pub spEffectID10: i32,
	pub spEffectID11: i32,
	pub spEffectID12: i32,
	pub spEffectID13: i32,
	pub spEffectID14: i32,
	pub spEffectID15: i32,
	pub autoFootEffectDecalBaseId1: i32,
	pub toughness: i32,
	pub toughnessRecoverCorrection: f32,
	pub neutralDamageCutRate: f32,
	pub slashDamageCutRate: f32,
	pub blowDamageCutRate: f32,
	pub thrustDamageCutRate: f32,
	pub magicDamageCutRate: f32,
	pub fireDamageCutRate: f32,
	pub thunderDamageCutRate: f32,
	pub darkDamageCutRate: f32,
	pub darkGuardCutRate: f32,
	pub clothUpdateOffset: i8,
	pub npcPlayerWeightType: u8,
	pub normalChangeModelId: i16,
	pub normalChangeAnimChrId: i16,
	pub paintRenderTargetSize: i16,
	pub resistCorrectId_disease: i32,
	pub phantomShaderId: i32,
	pub multiPlayCorrectionParamId: i32,
	pub maxAnklePitchAngle: f32,
	pub resist_freeze: i16,
	pub freezeGuardResist: i8,
	#[deku(skip, cond = "version >= 11210015")]
	pub pad1: [u8;1],
	#[deku(skip, cond = "version < 11210015")]
	pub unknown_0x1e3: u8,
	pub lockCameraParamId: i32,
	pub spEffectID16: i32,
	pub spEffectID17: i32,
	pub spEffectID18: i32,
	pub spEffectID19: i32,
	pub spEffectID20: i32,
	pub spEffectID21: i32,
	pub spEffectID22: i32,
	pub spEffectID23: i32,
	pub spEffectID24: i32,
	pub spEffectID25: i32,
	pub spEffectID26: i32,
	pub spEffectID27: i32,
	pub spEffectID28: i32,
	pub spEffectID29: i32,
	pub spEffectID30: i32,
	pub spEffectID31: i32,
	pub disableLockOnAng: f32,
	pub clothOffLodLevel: i8,
	#[deku(bits = 1)]
	pub isUseFootIKNormalByUnduration: u8,
	#[deku(bits = 1)]
	pub attachHitInitializeDead: u8,
	#[deku(bits = 1)]
	pub excludeGroupRewardCheck: u8,
	#[deku(bits = 1)]
	pub enableAILockDmyPoly_212: u8,
	#[deku(bits = 1)]
	pub enableAILockDmyPoly_213: u8,
	#[deku(bits = 1)]
	pub enableAILockDmyPoly_214: u8,
	#[deku(bits = 1)]
	pub disableActivateOpen_xb1: u8,
	#[deku(bits = 1)]
	pub disableActivateLegacy_xb1: u8,
	pub estusFlaskRecoveryParamId: i16,
	pub roleNameId: i32,
	pub estusFlaskLotPoint: i16,
	pub hpEstusFlaskLotPoint: i16,
	pub mpEstusFlaskLotPoint: i16,
	pub estusFlaskRecovery_failedLotPointAdd: i16,
	pub hpEstusFlaskRecovery_failedLotPointAdd: i16,
	pub mpEstusFlaskRecovery_failedLotPointAdd: i16,
	pub WanderGhostPhantomId: i32,
	pub hearingHeadSize: f32,
	pub SoundBankId: i16,
	pub forwardUndulationLimit: u8,
	pub sideUndulationLimit: u8,
	pub deactiveMoveSpeed: f32,
	pub deactiveMoveDist: f32,
	pub enableSoundObjDist: f32,
	pub undulationCorrectGain: f32,
	pub autoFootEffectDecalBaseId2: i16,
	pub autoFootEffectDecalBaseId3: i16,
	pub RetargetReferenceChrId: i16,
	pub SfxResBankId: i16,
	pub updateActivatePriolity: f32,
	pub chrNavimeshFlag_Alive: u8,
	pub chrNavimeshFlag_Dead: u8,
	#[deku(skip, cond = "version >= 11210015")]
	pub pad7: [u8;1],
	#[deku(skip, cond = "version < 11210015")]
	pub isConsideredUndead: u8,
	pub wheelRotType: u8,
	pub wheelRotRadius: f32,
	pub retargetMoveRate: f32,
	pub ladderWarpOffset: f32,
	pub loadAssetId: i32,
	pub overlapCameraDmypolyId: i32,
	pub residentMaterialExParamId00: i32,
	pub residentMaterialExParamId01: i32,
	pub residentMaterialExParamId02: i32,
	pub residentMaterialExParamId03: i32,
	pub residentMaterialExParamId04: i32,
	pub sleepCollectorItemLotId_enemy: i32,
	pub sleepCollectorItemLotId_map: i32,
	pub footIkErrorOnGain: f32,
	pub footIkErrorOffGain: f32,
	pub SoundAddBankId: i16,
	pub materialVariationValue: u8,
	pub materialVariationValue_Weak: u8,
	pub superArmorDurability: f32,
	pub saRecoveryRate: f32,
	pub saGuardCutRate: f32,
	pub resistCorrectId_blood: i32,
	pub resistCorrectId_curse: i32,
	pub resistCorrectId_freeze: i32,
	pub resistCorrectId_sleep: i32,
	pub resistCorrectId_madness: i32,
	pub chrDeadTutorialFlagId: i32,
	pub stepDispInterpolateTime: f32,
	pub stepDispInterpolateTriggerValue: f32,
	pub lockScoreOffset: f32,
	#[deku(skip, cond = "version >= 11210015")]
	pub pad12_old: [u8;8],
	#[deku(skip, cond = "version < 11210015")]
	pub dlcGameClearSpEffectID: i32,
	#[deku(skip, cond = "version < 11210015")]
	pub pad12: [u8;4],
}
